{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","memes","setMemes","useWebSocket","sendMessage","lastMessage","readyState","useForm","register","handleSubmit","errors","useEffect","data","JSON","parse","className","ReadyState","OPEN","map","meme","title","alt","src","imgSrc","text","style","marginBottom","author","onSubmit","console","log","stringify","htmlFor","type","name","id","ref","required","message","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA6DeA,MAvDf,WAAgB,IAAD,EACeC,qBADf,mBACJC,EADI,KACGC,EADH,OAEqCC,uBAAa,0BAAtDC,EAFI,EAEJA,YAAaC,EAFT,EAESA,YAAaC,EAFtB,EAEsBA,WAFtB,EAG8BC,cAAlCC,EAHI,EAGJA,SAAUC,EAHN,EAGMA,aAAcC,EAHpB,EAGoBA,OAc/B,OAZAC,qBAAU,WACN,GAAIN,IAAW,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAaO,MAAM,CAClC,IAAIX,EAAQY,KAAKC,MAAMT,EAAYO,MACnCV,EAASD,MAEd,CAACI,IAOG,sBAAKU,UAAU,MAAf,UACFT,IAAeU,aAAWC,KAAO,YAAc,gBAE/ChB,GAASA,EAAMA,OAASA,EAAMA,MAAMiB,KAAI,SAAAC,GAAI,aAAI,gCAC5CA,EAAKC,OAAS,6BAAKD,EAAKC,QACzB,qBAAKC,IAAI,OAAOC,IAAG,UAAEH,EAAKI,cAAP,QAAiB,8FACnCJ,EAAKK,MAAQ,8BAAML,EAAKK,OACzB,qBAAKC,MAAO,CAACC,aAAc,QAA3B,SAAqC,WAAaP,EAAKQ,eAG3D,sBAAMC,SAAUnB,GAfH,SAACU,GACdU,QAAQC,IAAR,kBAAuBjB,KAAKkB,UAAUZ,KACtCf,EAAYS,KAAKkB,UAAUZ,OAa3B,SACI,qCACI,gCACI,uBAAOa,QAAQ,SAAf,mBACA,uBAAOC,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,IAAK5B,EAAS,CAAC6B,SAAU,eACrE3B,EAAOiB,QAAUjB,EAAOiB,OAAOW,WAGpC,gCACI,uBAAON,QAAQ,SAAf,qBACA,uBAAOC,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,IAAK5B,EAAS,CAAC6B,SAAU,eACrE3B,EAAOa,QAAUb,EAAOa,OAAOe,WAGpC,gCACI,uBAAON,QAAQ,OAAf,uBACA,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,aAAaC,IAAK5B,MACnDE,EAAOc,MAAQd,EAAOc,KAAKc,WAGhC,8BACI,uBAAOL,KAAK,SAASlB,UAAU,SAASoB,GAAG,SAASI,MAAM,2BCxC/DC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.81599db9.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {useForm} from \"react-hook-form\";\nimport {useWebSocket} from \"react-use-websocket/dist/lib/use-websocket\";\nimport {ReadyState} from \"react-use-websocket/dist\";\n\nfunction App() {\n    const [memes, setMemes] = useState<Memes>();\n    const {sendMessage, lastMessage, readyState,} = useWebSocket(\"ws://localhost:8080/ws\");\n    const {register, handleSubmit, errors} = useForm<Meme>();\n\n    useEffect(() => {\n        if (lastMessage && lastMessage?.data) {\n            let memes = JSON.parse(lastMessage.data);\n            setMemes(memes)\n        }\n    }, [lastMessage])\n\n    const sendMeme = (meme: Meme) => {\n        console.log(`Sending ${JSON.stringify(meme)}`)\n        sendMessage(JSON.stringify(meme))\n    }\n\n    return <div className=\"App\">\n        {readyState === ReadyState.OPEN ? \"Connected\" : \"Not connected\"}\n\n        {memes && memes.memes && memes.memes.map(meme => <div>\n            {meme.title && <h1>{meme.title}</h1>}\n            <img alt=\"meme\" src={meme.imgSrc ?? \"https://image.shutterstock.com/image-vector/no-sign-isolated-on-white-260nw-323390270.jpg\"}/>\n            {meme.text && <div>{meme.text}</div>}\n            <div style={{marginBottom: \"40px\"}}>{\"Author: \" + meme.author}</div>\n        </div>)}\n\n        <form onSubmit={handleSubmit(sendMeme)}>\n            <fieldset>\n                <div>\n                    <label htmlFor=\"author\">Autor</label>\n                    <input type=\"text\" name=\"author\" id=\"author\" ref={register({required: \"Wymagane\"})}/>\n                    {errors.author && errors.author.message}\n                </div>\n\n                <div>\n                    <label htmlFor=\"imgSrc\">Img src</label>\n                    <input type=\"text\" name=\"imgSrc\" id=\"imgSrc\" ref={register({required: \"Wymagane\"})}/>\n                    {errors.imgSrc && errors.imgSrc.message}\n                </div>\n\n                <div>\n                    <label htmlFor=\"text\">Komentarz</label>\n                    <input type=\"text\" name=\"text\" id=\"senderName\" ref={register()}/>\n                    {errors.text && errors.text.message}\n                </div>\n\n                <div>\n                    <input type=\"submit\" className=\"button\" id=\"submit\" value=\"WyÅ›lij\"/>\n                </div>\n            </fieldset>\n        </form>\n    </div>;\n}\n\nexport default App;\n\ntype Memes = {\n    memes: Meme[]\n}\n\ntype Meme = {\n    author: string,\n    title: string | null,\n    text: string | null,\n    imgSrc: string | null,\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}